name: Deploy (dev -> prod)
on:
  push:
    branches:
      - main

env:
  IMAGE: ghcr.io/${{ github.repository }}/klage-dittnav:${{ github.sha }}

jobs:
  deploytodev:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      - name: Build frontend
        env:
          VERSION: ${{ github.sha }}
        run: |
          cd frontend
          npm run build
      - name: Test frontend
        run: |
          cd frontend
          npm test
      - name: Install server dependencies
        run: |
          cd server
          npm ci
      - name: Build server
        run: |
          cd server
          npm run build
      - name: Test server
        run: |
          cd server
          npm test
      - name: Build and publish Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.sha }}
        run: |
          cat Dockerfile
          docker build --build-arg VERSION --tag ${IMAGE} .
          docker login ghcr.io -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
          docker push ${IMAGE}
      - uses: actions/checkout@v2
        name: Checkout code
      - uses: nais/deploy/actions/deploy@master
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais/nais.yaml
          VARS: nais/dev.yaml
  deployprod:
    name: Deploy to prod-gcp
    needs: deploytodev
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        name: Checkout code
      - uses: nais/deploy/actions/deploy@master
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: nais/nais.yaml
          VARS: nais/prod.yaml
      - name: Generate release version
        run: |
          TIME=$(TZ="Europe/Oslo" date +%Y.%m.%d-%H.%M)
          COMMIT=$(git rev-parse --short=7 HEAD)
          VERSION=$TIME-$COMMIT
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
